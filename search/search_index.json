{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OuSpark","text":""},{"location":"#ouspark-automated-results-analytics-system","title":"OuSpark \u2013 Automated Results Analytics System","text":""},{"location":"#project-overview","title":"Project Overview","text":"<p>OuSpark is a Cross-Platform Mobile Application and an Automated Results Analytics System designed to revolutionize how engineering students and faculty from Engineering Colleges affiliated with Osmania University analyze results.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li> <p>   OuSpark Official Website </p> <p>Access official downloads for MacOS, Windows, Android, and get detailed terms and privacy policies.</p> </li> <li> <p> OuSpark on Google Play</p> <p>Download Android App from Google Playstore. </p> </li> </ul>"},{"location":"#key-highlights","title":"Key Highlights","text":"<p>Use the App to explore how automation, analytics, and data engineering transform result transparency and insights for students and faculty</p>"},{"location":"AutomationDevOps/automation/","title":"Pipeline Automation","text":""},{"location":"AutomationDevOps/automation/#pipeline-automation","title":"Pipeline Automation","text":""},{"location":"AutomationDevOps/automation/#overview","title":"Overview","text":"<p>Automation of the Data Engineering Pipeline was essential to reduce manual effort and improve reliability.</p>"},{"location":"AutomationDevOps/automation/#tools-evaluated","title":"Tools Evaluated","text":"Tool Strengths Weaknesses Apache Airflow Mature ecosystem, rich UI Complex setup, resource heavy Kestra YAML-based workflows, modern UI Newer tool, smaller community Apache AirflowKestra"},{"location":"AutomationDevOps/automation/#implementation","title":"Implementation","text":"<ul> <li>Pipelines defined as YAML workflows in Kestra for ease of maintenance</li> <li>API calls to FastAPI pipeline services orchestrated sequentially</li> <li>All components containerized in Docker for consistent environments</li> <li>Docker Compose setup links scrapers, databases, pipeline APIs, and workflow engines</li> </ul>"},{"location":"AutomationDevOps/automation/#results","title":"Results","text":"<ul> <li>Reduced pipeline execution time from 60+ minutes to 9 minutes</li> <li>Improved reliability with automated retries and notifications on failure</li> <li>Simplified maintenance via version-controlled workflow configurations</li> </ul> <p>Reliable. Efficient. Consistent.</p> <p>Automated execution ensures every stage runs reliably and efficiently, leading to consistent data quality and fast analytics update.</p>"},{"location":"ProjectOverview/architecture/","title":"Architecture","text":""},{"location":"ProjectOverview/architecture/#system-architecture","title":"System Architecture","text":""},{"location":"ProjectOverview/architecture/#architectural-philosophy","title":"Architectural Philosophy","text":"<p>OuSpark was designed with a microservices inspired architecture that prioritizes scalability, performance, and maintainability. Our solution addresses each identified problem through targeted technological interventions.</p>"},{"location":"ProjectOverview/architecture/#high-level-architecture","title":"High-Level Architecture","text":""},{"location":"ProjectOverview/architecture/#core-components-overview","title":"Core Components Overview","text":""},{"location":"ProjectOverview/architecture/#1-data-acquisition-layer","title":"1. Data Acquisition Layer","text":"Component Technology Purpose Web Scraper Python + Custom Algorithms Ultra-fast result extraction (10K+ results in 5 min) Data Validation Pydantic + Custom Logic Ensure data integrity and consistency"},{"location":"ProjectOverview/architecture/#2-processing-storage-layer","title":"2. Processing &amp; Storage Layer","text":"Component Technology Purpose ETL Pipeline 14 Stages (FastAPI) Transform raw data into actionable insights Development DB PostgreSQL Local processing and validation Production DB Supabase PostgreSQL Live application data store"},{"location":"ProjectOverview/architecture/#3-performance-layer","title":"3. Performance Layer","text":"Component Technology Purpose Caching Redis (Upstash) 90% reduction in I/O bandwidth Edge Functions Supabase Edge Optimized API responses CDN GitHub Pages Static asset delivery"},{"location":"ProjectOverview/architecture/#4-application-layer","title":"4. Application Layer","text":"Component Technology Purpose Cross-Platform App Flutter + Dart Unified experience across platforms UI/UX Design Figma + Lottie/Rive Professional, animated interfaces"},{"location":"ProjectOverview/architecture/#technology-stack-rationale","title":"Technology Stack Rationale","text":""},{"location":"ProjectOverview/architecture/#frontend-decision","title":"Frontend Decision","text":"Criteria Flutter React Nativ Native Cross-Platform \u2705 Excellent \u2705 Good \u274c Platform-specific Performance \u2705 Near-native \u26a0\ufe0f Good \u2705 Best Development Speed \u2705 Fast \u2705 Fast \u274c Slow Supabase Integration \u2705 Excellent \u2705 Good \u26a0\ufe0f Manual Team Expertise \u2705 High \u26a0\ufe0f Medium \u274c Limited <p>Decision: Flutter selected for optimal cross-platform development with strong Supabase integration.</p>"},{"location":"ProjectOverview/architecture/#backend-decision","title":"Backend Decision","text":"Criteria Supabase Firebase Custom Backend PostgreSQL Support \u2705 Native \u274c No \u2705 Manual Setup Real-time Features \u2705 Built-in \u2705 Built-in \u274c Custom Implementation Scalability \u2705 Automatic \u2705 Automatic \u26a0\ufe0f Manual Cost Efficiency \u2705 Good \u26a0\ufe0f Can be expensive \u274c High maintenance JSON Support \u2705 JSONB \u26a0\ufe0f Document-based \u2705 Manual <p>Decision: Supabase chosen for PostgreSQL compatibility with JSON support and comprehensive BaaS features.</p>"},{"location":"ProjectOverview/architecture/#caching-architecture","title":"Caching Architecture","text":"<pre><code>graph LR\nA[User Request] --&gt; B{Redis Cache}\nB --&gt;|Hit| C[Fast Response]\nB --&gt;|Miss| D[Database Query]\nD --&gt; E[Update Cache]\nE --&gt; C</code></pre>"},{"location":"ProjectOverview/architecture/#database-technology","title":"Database Technology","text":"Database Pros Cons Decision MySQL \u2705 Familiar, reliable \u274c Limited JSON support \u274c Rejected SQLite \u2705 Simple, file-based \u274c Not suitable for concurrent access \u274c Rejected MongoDB \u2705 JSON-native, flexible \u274c No SQL for analytics \u274c Rejected PostgreSQL \u2705 SQL + JSONB support \u2705 Perfect fit \u2705 Selected <p>This architecture enables OuSpark to handle massive scale while maintaining excellent performance and user experience across all platforms.</p>"},{"location":"ProjectOverview/problem-statement/","title":"Problem Statement","text":""},{"location":"ProjectOverview/problem-statement/#problem-statement","title":"Problem Statement","text":""},{"location":"ProjectOverview/problem-statement/#the-key-challenges","title":"The Key Challenges","text":"<p>Engineering colleges affiliated with Osmania University faced significant challenges in accessing and analyzing academic results effectively. Our research identified that these problems affected students, teachers, head of department, and college administrators the most.</p>"},{"location":"ProjectOverview/problem-statement/#primary-problems-identified","title":"Primary Problems Identified","text":""},{"location":"ProjectOverview/problem-statement/#1-limited-access-visibility","title":"1. Limited Access &amp; Visibility","text":"<p>Core Issues</p> <ul> <li>Results only accessible via individual hall ticket numbers</li> <li>Results scattered across multiple, temporary university URLs.</li> <li>No comprehensive view of batch, department, or college performance</li> <li>Manual result checking is a time consuming process</li> <li>Server overload during result announcement days</li> <li>Faculty and administration lack insight into department or college-wide performance for improvements.</li> <li>Difficulty in decision-making on re-evaluation due to lack of impact analysis.</li> </ul>"},{"location":"ProjectOverview/problem-statement/#2-data-fragmentation","title":"2. Data Fragmentation","text":"Problem Area Description Impact Scattered Links New URLs for each semester Historical data inaccessible Link Expiration Result links expire over time Permanent data loss No Aggregation Individual result silos No comparative analysis possible"},{"location":"ProjectOverview/problem-statement/#real-world-scenarios","title":"Real-World Scenarios","text":""},{"location":"ProjectOverview/problem-statement/#student-perspective","title":"Student Perspective","text":"<p>\"I spent hours manually checking results of my classmates to understand where I stand.</p> <p>\"There was no way to know if paying for revaluation would improve my CGPA meaningfully.\"</p>"},{"location":"ProjectOverview/problem-statement/#faculty-perspective","title":"Faculty Perspective","text":"<p>\"We couldn't identify which subjects were consistently challenging for students or compare our department's performance with others. This limited our ability to improve teaching methods.\"</p>"},{"location":"ProjectOverview/problem-statement/#administrative-perspective","title":"Administrative Perspective","text":"<p>\"Without aggregated data, we couldn't make informed decisions about curriculum changes, faculty development, or resource allocation.\"</p> <p>Current systems provide only isolated data per student, limit transparency, and hinder both academic self-assessment and institutional improvement.</p>"},{"location":"SystemArchitecture/backend/","title":"Backend","text":""},{"location":"SystemArchitecture/backend/#overview","title":"Overview","text":"<p>OuSpark's backend relies on Supabase, providing a fully managed PostgreSQL database, authentication, and serverless functions. This enables a scalable, maintainable, and secure system.</p>"},{"location":"SystemArchitecture/backend/#database-design","title":"Database Design","text":"<ul> <li>12 core tables to organize student results, departments, colleges, semesters, subjects, and user profiles</li> <li>Utilizes PostgreSQL's JSONB type to handle flexible subject data for students who elect different courses</li> <li>Strict relational integrity enforced with foreign keys and indexes</li> <li>Defined around 40 PL/pgSQL stored procedures to implement complex logic near the data for speed and security</li> </ul>"},{"location":"SystemArchitecture/backend/#api-business-logic","title":"API &amp; Business Logic","text":"<ul> <li>Supabase Edge Functions extend backend capabilities with custom APIs and caching strategies</li> <li>Use of Firebase Analytics to track app usage, feature hits, and user behavior</li> <li>Cron jobs automate daily tracking and backend maintenance tasks</li> </ul>"},{"location":"SystemArchitecture/backend/#performance-optimizations","title":"Performance Optimizations","text":"Technique Description Redis Caching (Upstash) Caches heavy read results reducing disk I/O by 90% Prewarming Cache Periodically refreshes cache to improve response times SQL Indexing &amp; Query Optimization Ensures efficient data retrieval"},{"location":"SystemArchitecture/backend/#security","title":"Security","text":"<ul> <li>Authentication using Supabase Email Auth and Google OAuth Provider</li> <li>Database row-level security and access policies</li> <li>Rate limiting on APIs to prevent abuse</li> </ul>"},{"location":"SystemArchitecture/backend/#scalability","title":"Scalability","text":"<ul> <li>Horizontal scaling supported by managed Supabase infrastructure</li> <li>Stateless API functions enable load balancing</li> <li>Separated development and production databases for safety and fast iteration</li> </ul> <p>This backend architecture ensures data integrity, security, and high performance with ease of management.</p>"},{"location":"SystemArchitecture/frontend/","title":"Frontend","text":""},{"location":"SystemArchitecture/frontend/#frontend-uiux-and-features","title":"Frontend: UI/UX and Features","text":""},{"location":"SystemArchitecture/frontend/#overview","title":"Overview","text":"<p>The OuSpark frontend is a cross-platform mobile and desktop application built using Flutter and Dart, designed to provide a rich and seamless user experience.</p>"},{"location":"SystemArchitecture/frontend/#design-philosophy","title":"Design Philosophy","text":"<ul> <li>Uniform Experience: Consistent UI and UX across Android, macOS, and Windows</li> <li>Performance: Near-native performance with smooth animations</li> <li>Responsiveness: Adaptable to different screen sizes and device types</li> </ul>"},{"location":"SystemArchitecture/frontend/#uiux-design-process","title":"UI/UX Design Process","text":"<ul> <li>Created wireframes and prototypes using Figma</li> <li>Incorporated engaging animations using Lottie and Rive</li> <li>Developed reusable widgets for charts: Bar Chart, Pie Chart, Gauge, Line Chart</li> <li>Ensured color schemes and branding were consistent with the project identity</li> </ul>"},{"location":"SystemArchitecture/frontend/#core-features","title":"Core Features","text":""},{"location":"SystemArchitecture/frontend/#for-students","title":"for Students","text":"<ul> <li>Personalized Dashboard showing student profile and semester-wise results</li> <li>Notification Banners for timely updates</li> <li>Tools Section including SGPA &amp; CGPA calculators, and search results</li> <li>Advanced Analytics such as college, department, and student rankings</li> <li>Demographics Analytics with gender ratio insights</li> </ul>"},{"location":"SystemArchitecture/frontend/#for-faculty-and-administrators","title":"for Faculty and Administrators","text":"<ul> <li>Access to detailed analytics for departments and batches</li> <li>Comparative performance dashboards across colleges and semesters</li> <li>Notification system for important announcements</li> <li>Resource links and strategic planning tools</li> </ul>"},{"location":"SystemArchitecture/frontend/#technical-details","title":"Technical Details","text":"Feature Implementation Details Network Calls Supabase SDK and custom HTTP clients Animations Integrated with Rive and Lottie JSON animations <p>This architecture supports rapid feature development and a maintainable codebase across multiple platforms</p>"},{"location":"SystemArchitecture/pipeline/","title":"Data Pipeline","text":""},{"location":"SystemArchitecture/pipeline/#data-engineering-pipeline-architecture","title":"Data Engineering Pipeline Architecture","text":""},{"location":"SystemArchitecture/pipeline/#overview","title":"Overview","text":"<p>The Data Engineering Pipeline is the core engine that processes raw results data into actionable insights, powering the OuSpark analytics system.</p>"},{"location":"SystemArchitecture/pipeline/#pipeline-design","title":"Pipeline Design","text":"<ul> <li>Implemented as 14 sequential stages (Stage 0 to Stage 13) representing Extraction, Transformation, Loading, Syncing, and Caching processes</li> <li>Each stage is exposed as a FastAPI standalone microservice</li> <li>Pipeline maintains a development PostgreSQL database for local processing before syncing to production</li> </ul>"},{"location":"SystemArchitecture/pipeline/#stages-summary","title":"Stages Summary","text":"Stage Description Stage 0 Ultra-fast HTML scraping from OU website (10k+ results in ~5 min) Stage 1 Extract, clean and load data into development PostgreSQL Stages 2-11 Analytics computation: rankings, credits, CGPAs, demographics, semester, subject, college, and department stats Stage 12 Synchronize processed data with production Supabase PostgreSQL Stage 13 Flush and prewarm Redis cache with updated analytics"},{"location":"SystemArchitecture/pipeline/#pipeline-automation","title":"Pipeline Automation","text":"<ul> <li>Automated execution of pipeline stages using Kestra (YAML-configured workflows) preferred due to UI and maintainability advantages</li> <li>Also supports Apache Airflow for DAG-based orchestration</li> <li>All services containerized using Docker and linked via Docker Compose</li> </ul>"},{"location":"SystemArchitecture/pipeline/#pipeline-workflow-diagram","title":"Pipeline Workflow Diagram","text":"<pre><code>sequenceDiagram\nparticipant Scraper as Stage 0 Scraper\nparticipant ETL1 as Stage 1 ETL\nparticipant Compute as Stages 2-11 Analytics\nparticipant DevDB as Dev PostgreSQL DB\nparticipant Sync as Stage 12 Sync\nparticipant ProdDB as Production Supabase DB\nparticipant RedisCache as Stage 13 Redis Cache\nScraper-&gt;&gt;ETL1: Scraped HTML data\nETL1-&gt;&gt;DevDB: Cleaned data loaded\nETL1-&gt;&gt;Compute: Trigger computations\nCompute-&gt;&gt;DevDB: Updated analytics\nDevDB-&gt;&gt;Sync: Sync data\nSync-&gt;&gt;ProdDB: Production DB updated\nProdDB-&gt;&gt;RedisCache: Cache prewarm</code></pre> Apache AirflowKestra"},{"location":"SystemArchitecture/pipeline/#performance-outcomes","title":"Performance Outcomes","text":"<ul> <li>Entire pipeline runs end-to-end in approximately 9 minutes compared to over 1 hour previously</li> <li>Automation eliminates human errors and manual intervention</li> <li>Scalability enabled by containerization and parallelizable API architecture</li> </ul> <p>This pipeline architecture is a critical component enabling OuSpark's real-time, scalable analytics capabilities.</p> <p>FastAPI-Powered Stable Architecture</p> <p>APIs for each stage are implemented using FastAPI. A dual-database (dev and prod) approach ensures reliability and quick recovery from errors.</p>"},{"location":"TechJourney/history/","title":"Evolution","text":""},{"location":"TechJourney/history/#project-history-evolution","title":"Project History &amp; Evolution","text":"<p>The OuSpark project evolved through multiple phases, each addressing growing requirements and technical challenges. This journey showcases how a simple idea transformed into a comprehensive result analytics platform.</p>"},{"location":"TechJourney/history/#phase-1-basic-scraping-and-analysis","title":"Phase 1: Basic scraping and analysis","text":"<p>Tools Used:</p> <ul> <li>Python (requests, BeautifulSoup, pandas)</li> <li>Matplotlib for basic visualization</li> <li>Jupyter Notebook for development</li> <li>CSV files for data storage</li> </ul> <p>Achievements:</p> <ul> <li>\u2705 Basic result extraction</li> <li>\u2705 Pass/fail ratio calculation</li> <li>\u2705 Subject-wise performance analysis</li> <li>\u2705 Simple student rankings</li> </ul>"},{"location":"TechJourney/history/#phase-2-architectural-improvements","title":"Phase 2: Architectural Improvements","text":"<pre><code>graph LR\nA[Raw HTML] --&gt; B[Results Extraction]\nB --&gt; C[Data Cleaning]\nC --&gt; D[Data Visualization]\nD --&gt; E[Export to PDF]</code></pre> <p>New Technologies:</p> <ul> <li>Streamlit: Interactive web application</li> <li>ydata-profiling: Advanced data analysis</li> <li>Nivo Charts: Interactive visualizations</li> <li>PDF Export: Shareable reports</li> </ul> <p>Key Learnings:</p> <ul> <li>Importance of separation of concerns</li> <li>Need for interactive interfaces</li> <li>Value of exportable analytics</li> </ul>"},{"location":"TechJourney/history/#streamlit-webapp-ui","title":"Streamlit Webapp UI:","text":""},{"location":"TechJourney/history/#phase-3-scalable-tech-stack","title":"Phase 3: Scalable Tech Stack","text":"<p>Requirements:</p> <ul> <li>Cross-platform deployment (Mobile + Desktop)</li> <li>Stable production performance</li> <li>Good integration with chosen backend</li> </ul> <p>Final Stack Decision:</p> <ul> <li>Frontend: Dart (Flutter)</li> <li>Backend: Supabase (PostgreSQL + Auth + Storage)</li> <li>Pipeline: Python (FastAPI), YAML, Airflow, Kestra, Docker.</li> </ul>"},{"location":"TechJourney/history/#phase-4-uiux-design","title":"Phase 4: UI/UX Design","text":"<p>Before:</p> <ul> <li>Basic Streamlit interface</li> <li>Limited customization</li> <li>Poor mobile experience</li> </ul> <p>After:</p> <ul> <li>Professional Figma designs</li> <li>Custom animations (Lottie + Rive)</li> <li>Mobile-first approach</li> <li>Consistent branding</li> </ul>"},{"location":"TechJourney/history/#phase-5-performance-optimization","title":"Phase 5: Performance Optimization \u26a1","text":"<p>Problem: CPU utilization reached ~70% daily due to heavy read operations</p> <p>Investigation Results:</p> <ul> <li>Search Results was the most-used feature (Firebase Analytics insight) in the app.</li> <li>Heavy database I/O was causing bottlenecks</li> </ul>"},{"location":"TechJourney/history/#solution-architecture","title":"Solution Architecture","text":"<pre><code>graph LR\nA[User Request] --&gt; B{Redis Cache}\nB --&gt;|Hit| C[Fast Response]\nB --&gt;|Miss| D[Database Query]\nD --&gt; E[Update Cache]\nE --&gt; C</code></pre> <p>Implementation:</p> <ul> <li>Redis Integration: Upstash serverless Redis</li> <li>Supabase Edge Functions: Custom caching logic</li> <li>Prewarming Strategy: Populate cache proactively</li> </ul> <p>Results:</p> <ul> <li>\ud83d\udcca Disk I/O: 90% \u2192 1% reduction</li> <li>\u26a1 Response Time: Significantly improved</li> <li>\ud83c\udfaf User Experience: Seamless and fast</li> </ul> <p></p>"},{"location":"TechJourney/history/#phase-6-pipeline-automation","title":"Phase 6: Pipeline Automation","text":"<p>Challenge: Manual pipeline execution was error-prone and time-consuming</p> <p>Solutions Evaluated:</p>"},{"location":"TechJourney/history/#apache-airflow","title":"Apache Airflow","text":"<ul> <li>DAG-based workflow definition</li> <li>Sequential task execution</li> <li>Pros: Mature, well-documented  </li> <li>Cons: Complex setup, heavy resource usage</li> </ul>"},{"location":"TechJourney/history/#kestra","title":"Kestra","text":"<ul> <li>YAML-based workflow definition</li> <li>Sequential API call to execute pipeline</li> <li>Pros: YAML configuration, better UI  </li> <li>Cons: Newer technology, smaller community</li> </ul> <p>Final Choice: Both tools were implemented, with Kestra preferred for its superior UI and YAML-based configuration.</p> <p>Performance Improvements Over Time</p> Metric Phase 1 Phase 2 Phase 6 Improvement Processing Time 1+ hour 1+ hour 9 minutes 85% faster Result Extraction Manual 1 hour 5 minutes 92% faster Concurrent Users 1 ~10 200+ 200% increase Platform Support 1 (Jupyter) 1 (Web) 3 (Mobile/Desktop/Web) 300% increase <p>This evolution demonstrates how thoughtful technology choices and iterative development can transform a simple concept into a robust, scalable platform serving thousands of users.</p>"},{"location":"TechJourney/tech-stack/","title":"Technology Stack","text":""},{"location":"TechJourney/tech-stack/#technology-stack","title":"Technology Stack","text":""},{"location":"TechJourney/tech-stack/#overview","title":"Overview","text":"<p>The OuSpark project leveraged a carefully selected technology stack to balance performance, scalability, and development efficiency.</p>"},{"location":"TechJourney/tech-stack/#frontend-technologies","title":"Frontend Technologies","text":"Technology Purpose Benefits Flutter &amp; Dart Cross-platform app development (Android, macOS, Windows) Single codebase, native performance, rich UI components Figma UI/UX design and prototyping Collaborative design and rapid iteration Lottie &amp; Rive Animations and interactive graphics Lightweight, smooth animations on all platforms"},{"location":"TechJourney/tech-stack/#backend-technologies","title":"Backend Technologies","text":"Technology Purpose Benefits Supabase (PostgreSQL) Backend as a service with database, authentication, and APIs Fully managed, built-in JSONB support, scalable PL/pgSQL Functions Complex business logic inside the database Fast execution, maintainable logic close to data Supabase Edge Functions Custom API endpoints &amp; caching logic Low latency, extend backend capabilities"},{"location":"TechJourney/tech-stack/#data-engineering-pipeline","title":"Data Engineering Pipeline","text":"Technology Purpose Benefits Python Core programming language for pipeline logic Rich data processing libraries FastAPI API framework for pipeline services Fast, asynchronous, excellent developer experience Pydantic Data validation and settings management Ensures data integrity Pandas Data analysis and manipulation Efficient processing of tabular data SQLAlchemy ORM for PostgreSQL interactions Clean database access UV Python package manager Manages python dependencies"},{"location":"TechJourney/tech-stack/#performance-caching","title":"Performance &amp; Caching","text":"Technology Purpose Benefits Redis (Upstash) Cache layer for search results Reduces disk I/O, improves response time Firebase Analytics App usage tracking and analysis Real-time feature usage metrics"},{"location":"TechJourney/tech-stack/#automation-orchestration","title":"Automation &amp; Orchestration","text":"Technology Purpose Benefits Kestra Workflow orchestration using YAML Simplifies pipeline maintenance and UI Apache Airflow DAG-based workflow management Mature, flexible, but resource-heavy Docker &amp; Docker Compose Containerize services and pipeline Easy deployment and environment consistency"},{"location":"TechJourney/tech-stack/#notifications-hosting","title":"Notifications &amp; Hosting","text":"Technology Purpose Benefits OneSignal Push notification service User engagement via real-time notifications GitHub Pages Hosting static assets (banners, animations) Cost-effective, reduces egress consumption <p>Optimized Tech Stack</p> <p>The stack was chosen for rapid development, scaling flexibility, and straight forward integration.</p>"}]}